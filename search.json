[{"title":"cSharp使用细节","date":"2022-04-10T15:22:34.000Z","url":"/2022/04/10/cSharp%E4%BD%BF%E7%94%A8%E7%BB%86%E8%8A%82/","tags":[["cSharp","/tags/cSharp/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"]],"content":" 接口的使用细节假如我要创建一个二重的接口需要以以下方法创建 前半部分为接口，后半部分为实例化部分，现在前半部分的接口为IList&lt;List&gt;，相当于二维数组的第一层那部分为接口，里面的为实例化int型，后面要为这个接口赋值的话，也必须是IList&lt;List&gt;类型，或者是List&lt;List&gt;类型因为是其子类，哪怕是IList&lt;IList&gt;都不行。 IList&lt;T&gt;是泛型接口的基类 List&lt;T&gt;是IList&lt;T&gt;的子类，也就是实例化了的类 给IList&lt;T&gt;赋值还可以自定义一个他的子类，实现他的方法 IList&lt;IList&lt;T&gt;&gt;类型可以被List&lt;IList&lt;T&gt;&gt;实例化，其中内部那个可以是我们实例化的IList接口垫任何子类 二维List的输入与输出例子 题目点这里]() "},{"title":"Ray详解鼠标选取物品以及目标匹配","date":"2022-04-09T07:29:01.000Z","url":"/2022/04/09/Ray%E8%AF%A6%E8%A7%A3%E9%BC%A0%E6%A0%87%E9%80%89%E5%8F%96%E7%89%A9%E5%93%81%E4%BB%A5%E5%8F%8A%E7%9B%AE%E6%A0%87%E5%8C%B9%E9%85%8D/","tags":[["unity","/tags/unity/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"]],"content":" Ray Ray (origin : Vector3, direction : Vector3)Origin 是射线的中心Direction 是射线的长度 Ray ray &#x3D; Camera.main.ScreenPointToRay(Input.mousePosition)这句话的意思为创一个射线在鼠标所在位置从摄像机发送至屏幕 除了Ray还有Physics.Raycast用以检测光线是否触碰到物体其中API文档中有的四个 public static bool Raycast(Ray ray, RaycastHit hitInfo, float distance, int layerMask); public static bool Raycast(Ray ray, float distance, int layerMask); public static bool Raycast(Vector3 origin, Vector3 direction, float distance, int layerMask); public static bool Raycast(Vector3 origin, Vector3 direction, RaycastHit , float distance ，int layerMask); 个人认为参数多点会更提高代码可读性除此之外还可以去vs里查看更多Raycast的重载注意：这个layerMask一定要用LayerMask.GetMask不要用LayerMask.NameToLayer去得到当前蒙版的级别因为这个参数里面的Layermask是2的当前层级的次方 RaycastHit（上一个的函数里面有一个参数是这个） 这个可以提供你一个介值使用out参数传递给上面的函数在那里面使用使用完以后这个RaycastHit类型参数就有值可以使用了，可以吧有值的这个参数当做gameobject类型使用。 鼠标选择物体 首先放三个物体 然后给他们的Layer改一下 写上ray相关的代码 当鼠标移至目标位置会有下图的效果 如有需要可以设置成需要按什么键的时候鼠标在上面才会移动 目标匹配 函数： 如何使用：使你的targetBodyPart（你想要动的身体部位）在你执行的动作的开始时间startNormalizedTime到最终时间targetNormalizedTime之间，移向目标地方matchRotation,matchPosition（目标地点的位置和旋转值）并且你需要定下一个weightMask（x,y,x方向上的权重）去移动 用于攀爬和移动之类，用途广泛 "},{"title":"相对路径及根目录还有斜杠与反斜杠的区别","date":"2022-04-09T07:23:36.000Z","url":"/2022/04/09/%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%8F%8A%E6%A0%B9%E7%9B%AE%E5%BD%95%E8%BF%98%E6%9C%89%E6%96%9C%E6%9D%A0%E4%B8%8E%E5%8F%8D%E6%96%9C%E6%9D%A0%E7%9A%84%E5%8C%BA%E5%88%AB/","tags":[["Vs","/tags/Vs/"]],"categories":[["细节问题","/categories/%E7%BB%86%E8%8A%82%E9%97%AE%E9%A2%98/"]],"content":" 相对路径的表示 .&#x2F;表示的是当前层级 ..&#x2F;表示的是上一级 .的个数减一就是往前几级 如果不填什么层级直接就打文件名，那么就会以根目录(即exe程序所在路径，或者为sln文件所在路径)为基准往下找，直到找到这个文件为止。 例如： 注意：这个往下只是根目录往下，当然也只有你不写层级的时候才会这么找，其他的就不行 “&#x2F;“与”\\“ “\\“在代码中这个是转义字符所以写地址的时候要写”\\\\“ “&#x2F;“写地址是时候如果为斜杠则只用写一个 "},{"title":"Git的使用与说明","date":"2022-04-09T07:08:20.000Z","url":"/2022/04/09/Git%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E8%AF%B4%E6%98%8E/","tags":[["Git","/tags/Git/"]],"categories":[["软件使用","/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"]],"content":"介绍Git的使用 Git指令介绍 git init （初始化仓库） git add [.] （全部文件加入暂存区,后面那个点改成文件名是将改文件名加入暂存） git status （得到当前git内部的状态） touch ad.txt （给当前目录下增加一个叫ad的txt’文件） git commit -m ‘此处写描述 ‘（将暂存区的文件放进本地仓库） ls （查询当前仓库内的东西） vi （打开文件写东西） wp （关闭文件） cat ad.txt[文件名]（查看文件内容） rm -rf ad.txt [文件名] (删除该文件) git rm ad.txt [文件名] （在git中删除该文件） git clone 仓库地址 （将此仓库地址的东西克隆到本地仓库） git config -list （查询本地git软件内的信息。。包括个人信息和邮箱） clear （清屏） git config –global user.name ‘此处写github的用户名’ （初始化用户名） git config –global user.email’此处写github的邮箱’ （初始化用户邮箱） git remote add origin [此处写你要上传的地址] （增加上传地址） git push （全部上传） git push -u origin main （将主分支上传） git branch （查看本地分支） git branch -r （查看远程分支） git branch [此处写分支名] （增加一个分支，名字自取） git branch -d [分支名] （删除指定分支） git merge [分支名] （合并指定分支到当前分支） git ls-files （查看本地仓库内的文件） git remote remove origin （断开远程连接） git remote -v （查看远程仓库） $ git push -u origin1 master （将origin1合并到master内） 注意：蓝色的名字是你当前的分支 Git 上传步骤 首先把用户名和邮箱填上 然后获取公钥使用 ssh-keygen -t rsa 指令在电脑里面.ssh 里面使用 ssh -T &#103;&#105;&#x74;&#64;&#103;&#105;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#111;&#x6d; 让git与github建立连接 先实例化本地仓库 使用git init 使用add 来加入暂存区 使用commit 放进仓库 使用remote 增加上传地址 注意格式为&#x2F;&#x2F;不是&#x2F; 使用push上传 GitHub 网站搭建 在已经创建了的仓库内点击设置 进入page页面 点击下面按钮创建网页 通过https:&#x2F;&#x2F;[用户名].github.io&#x2F;[仓库名]&#x2F;访问 创建个人站点 首先创建一个仓库（名字要为（[用户名].github.io）） 在仓库里面创建一个叫index.html的文件如图 创建仓库 创建文件 注意这个仓库里面只能有html文件 通过[用户名].github.io访问 git的学习视频 "}]